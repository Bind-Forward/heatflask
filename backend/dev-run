#!/bin/bash

# This runs a development server with gunicorn.
#  You need a .env file that sets the python (virtualenv, conda, etc) and shell environments.
#  See contributing.md

source .env

PORT=5000

while [ "$1" != "" ]; do
    case $1 in
        -o | --offline )        export OFFLINE=1
                                ;;
        -r | --remote_db )      export USE_REMOTE_DB=1
                                ;;
        -p | --port )           export PORT="$2"
                                ;;
        -h | --help )           usage
                                exit
                                ;;
    esac
    shift
done

GUNICORN_CMD_ARGS="--reload --worker-class flask_sockets.worker --log-level=debug --graceful-timeout 5 --bind '0.0.0.0:$PORT'"

HEROKU_CLI=/usr/bin/heroku

# Kill any running instances of gunicorn on the target port
pkill gunicorn

# Run the backend server via heroku local if it is available, otherwise gunicorn directly
if [ $OFFLINE ]; then
    echo "Running backend without network connection"
    gunicorn heatflask.wsgi:app

elif [ -f "$HEROKU_CLI" ]; then
    echo "$HEROKU_CLI is present"
    heroku local
else
    echo "$HEROKU_CLI does not exist"
    gunicorn heatflask.wsgi:app
fi

